// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/pkg/provider/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/cyril-jump/gophkeeper/internal/server/app/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProvider) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProvider)(nil).Close))
}

// Create mocks base method.
func (m *MockProvider) Create(ctx context.Context, user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockProviderMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProvider)(nil).Create), ctx, user)
}

// CreateNewBlobData mocks base method.
func (m *MockProvider) CreateNewBlobData(ctx context.Context, userID string, data domain.BlobData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewBlobData", ctx, userID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewBlobData indicates an expected call of CreateNewBlobData.
func (mr *MockProviderMockRecorder) CreateNewBlobData(ctx, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewBlobData", reflect.TypeOf((*MockProvider)(nil).CreateNewBlobData), ctx, userID, data)
}

// CreateNewCardData mocks base method.
func (m *MockProvider) CreateNewCardData(ctx context.Context, userID string, data domain.CardData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewCardData", ctx, userID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewCardData indicates an expected call of CreateNewCardData.
func (mr *MockProviderMockRecorder) CreateNewCardData(ctx, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewCardData", reflect.TypeOf((*MockProvider)(nil).CreateNewCardData), ctx, userID, data)
}

// CreateNewCredData mocks base method.
func (m *MockProvider) CreateNewCredData(ctx context.Context, userID string, data domain.CredData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewCredData", ctx, userID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewCredData indicates an expected call of CreateNewCredData.
func (mr *MockProviderMockRecorder) CreateNewCredData(ctx, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewCredData", reflect.TypeOf((*MockProvider)(nil).CreateNewCredData), ctx, userID, data)
}

// CreateNewTextData mocks base method.
func (m *MockProvider) CreateNewTextData(ctx context.Context, userID string, data domain.TextData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewTextData", ctx, userID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewTextData indicates an expected call of CreateNewTextData.
func (mr *MockProviderMockRecorder) CreateNewTextData(ctx, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewTextData", reflect.TypeOf((*MockProvider)(nil).CreateNewTextData), ctx, userID, data)
}

// GetAllBlobData mocks base method.
func (m *MockProvider) GetAllBlobData(ctx context.Context, userID string) ([]domain.BlobData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBlobData", ctx, userID)
	ret0, _ := ret[0].([]domain.BlobData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBlobData indicates an expected call of GetAllBlobData.
func (mr *MockProviderMockRecorder) GetAllBlobData(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBlobData", reflect.TypeOf((*MockProvider)(nil).GetAllBlobData), ctx, userID)
}

// GetAllCardData mocks base method.
func (m *MockProvider) GetAllCardData(ctx context.Context, userID string) ([]domain.CardData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCardData", ctx, userID)
	ret0, _ := ret[0].([]domain.CardData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCardData indicates an expected call of GetAllCardData.
func (mr *MockProviderMockRecorder) GetAllCardData(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCardData", reflect.TypeOf((*MockProvider)(nil).GetAllCardData), ctx, userID)
}

// GetAllCredData mocks base method.
func (m *MockProvider) GetAllCredData(ctx context.Context, userID string) ([]domain.CredData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCredData", ctx, userID)
	ret0, _ := ret[0].([]domain.CredData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCredData indicates an expected call of GetAllCredData.
func (mr *MockProviderMockRecorder) GetAllCredData(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCredData", reflect.TypeOf((*MockProvider)(nil).GetAllCredData), ctx, userID)
}

// GetAllTextData mocks base method.
func (m *MockProvider) GetAllTextData(ctx context.Context, userID string) ([]domain.TextData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTextData", ctx, userID)
	ret0, _ := ret[0].([]domain.TextData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTextData indicates an expected call of GetAllTextData.
func (mr *MockProviderMockRecorder) GetAllTextData(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTextData", reflect.TypeOf((*MockProvider)(nil).GetAllTextData), ctx, userID)
}

// GetByCredentials mocks base method.
func (m *MockProvider) GetByCredentials(ctx context.Context, login, password string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCredentials", ctx, login, password)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCredentials indicates an expected call of GetByCredentials.
func (mr *MockProviderMockRecorder) GetByCredentials(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCredentials", reflect.TypeOf((*MockProvider)(nil).GetByCredentials), ctx, login, password)
}

// UpdateBlobDataByID mocks base method.
func (m *MockProvider) UpdateBlobDataByID(ctx context.Context, userID string, data domain.BlobData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlobDataByID", ctx, userID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBlobDataByID indicates an expected call of UpdateBlobDataByID.
func (mr *MockProviderMockRecorder) UpdateBlobDataByID(ctx, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlobDataByID", reflect.TypeOf((*MockProvider)(nil).UpdateBlobDataByID), ctx, userID, data)
}

// UpdateCardDataByID mocks base method.
func (m *MockProvider) UpdateCardDataByID(ctx context.Context, userID string, data domain.CardData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCardDataByID", ctx, userID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCardDataByID indicates an expected call of UpdateCardDataByID.
func (mr *MockProviderMockRecorder) UpdateCardDataByID(ctx, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCardDataByID", reflect.TypeOf((*MockProvider)(nil).UpdateCardDataByID), ctx, userID, data)
}

// UpdateCredDataByID mocks base method.
func (m *MockProvider) UpdateCredDataByID(ctx context.Context, userID string, data domain.CredData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredDataByID", ctx, userID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCredDataByID indicates an expected call of UpdateCredDataByID.
func (mr *MockProviderMockRecorder) UpdateCredDataByID(ctx, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredDataByID", reflect.TypeOf((*MockProvider)(nil).UpdateCredDataByID), ctx, userID, data)
}

// UpdateTextDataByID mocks base method.
func (m *MockProvider) UpdateTextDataByID(ctx context.Context, userID string, data domain.TextData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTextDataByID", ctx, userID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTextDataByID indicates an expected call of UpdateTextDataByID.
func (mr *MockProviderMockRecorder) UpdateTextDataByID(ctx, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTextDataByID", reflect.TypeOf((*MockProvider)(nil).UpdateTextDataByID), ctx, userID, data)
}
